SHELL			=	cmd.exe

# ------------------------------------------------------------------------------
# Makefile.win32
# Windows Makefile for 32-bit Pinguino
# Regis Blanchot <rblanchot@gmail.com> 
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Directories
# ------------------------------------------------------------------------------
# HOME, PDEDIR, PROC & BOARD are defined in pinguino.py
 
OSDIR			=	win32
SRCDIR		=	$(HOME)\source
P32DIR		=	$(HOME)\p32
P32CORE		=	$(HOME)\$(OSDIR)\p32
BINDIR		=	$(P32CORE)\bin
INCDIR		=	$(P32DIR)\include
LKRDIR		=	$(P32DIR)\lkr\$(BOARD)
OBJDIR		=	$(P32DIR)\obj\non-free

INCLUDEDIRS	=	-I$(INCDIR)\non-free \
					-I$(INCDIR)\pinguino\core \
					-I$(INCDIR)\pinguino\libraries \
					-I$(LKRDIR) \
					-I$(PDEDIR) \
					-I$(OBJDIR)

LIBDIRS		=	-L$(OBJDIR)\usb

# ----------------------------------------------------------------------
# Various options
# ----------------------------------------------------------------------
# - heap size / Regis Blanchot 2012
# - cdc library / Jean-pierre Mandon 2012
# - MIPS16/MIPS32 option (MIPS16 option could drastically reduce code size) / ??? 2013
# - unsupported record in hex file / Jean-pierre Mandon 2012
#		04		 : 4 bytes
#		0000	 : address
#		05		 : record type = Start_Linear_Address_Record
#		9D004000 : address where the user program should start
#				 : _RESET_ADDR (see lkr/procdefs.ld)
#		1A		 : checksum
# ----------------------------------------------------------------------

ifneq (,$(filter $(_IDE_BOARD_),PIC32_PINGUINO_220 PINGUINO32MX220 PINGUINO32MX250 PINGUINO32MX270))
	CDCLIBRARY  = libcdc220.a
	BADRECORD   = '^:040000059D0040001A'
else
	CDCLIBRARY  = libcdc.a
	BADRECORD   ='^:040000059D006000FA'
endif

# ----------------------------------------------------------------------
# commands
# ----------------------------------------------------------------------

ifdef CPLUPLUS
	CC		  = $(_IDE_BINDIR_)\p32-g++.exe
	LIBS	  = -lstdc++ -lm -lgcc -lc
else
	CC		  = $(_IDE_BINDIR_)\p32-gcc.exe
	LIBS	  = -lm -lgcc -lc
endif

OBJC		  = $(_IDE_BINDIR_)\p32-objcopy.exe

RM				= @del
CP				= @copy
MV				= @move

# ----------------------------------------------------------------------
# flags
# ----------------------------------------------------------------------

ifeq "$(_IDE_MIPS16_ENABLE_)" "true"
	# Generate MIPS16 code.
	MIPS16_OPT=-mips16
	# makes non-MIPS16 and MIPS16 code link-compatible.
	MIPS16_INTER=-minterlink-mips16
endif

#-fdollars-in-identifiers for ISRwrapper.S
CFLAGS		=	-fdollars-in-identifiers $(INCLUDEDIRS) -msoft-float -ffunction-sections -fdata-sections 

LDFLAGS			= $(LIBDIRS) $(LIBS)

ELF_FLAGS		= -EL $(_IDE_OPTIMIZATION_) -march=24kc -msoft-float $(MIPS16_INTER) \
				  -ffunction-sections \
				  -fdata-sections \
				  -Wl,--gc-sections \
				  -Wl,-L$(OBJDIR) \
				  -Wl,--defsym,_min_heap_size=$(_IDE_HEAP_SIZE_) \
				  -Wl,-Map=$(_IDE_SRCDIR_)\output.map \
				  -D __PIC32MX__ \
				  -D __$(_IDE_PROC_)__ \
				  -D $(_IDE_BOARD_) \
				  -T$(LKRDIR)\procdefs.ld \
				  -T$(LKRDIR)\elf32pic32mx.x

# ----------------------------------------------------------------------
# rules
# ----------------------------------------------------------------------

all: clean copy compile convert correct

clean:
	#---------------------------------------------------------------------------
	#	cleaning all build files
	#---------------------------------------------------------------------------
	if exist $(_IDE_SRCDIR_)\main32.o $(RM) $(_IDE_SRCDIR_)\main32.o
	if exist $(_IDE_SRCDIR_)\main32.elf $(RM) $(_IDE_SRCDIR_)\main32.elf
	if exist $(_IDE_SRCDIR_)\main32.hex $(RM) $(_IDE_SRCDIR_)\main32.hex
	if exist $(_IDE_OBJDIR_)\processor.o $(RM) $(OBJDIR)\processor.o

copy:
	#---------------------------------------------------------------------------
	#	adding proc. definitions
	#---------------------------------------------------------------------------
	$(CP) $(OBJDIR)\$(_IDE_PROC_).o $(OBJDIR)\processor.o > nul

compile:
	#---------------------------------------------------------------------------
	#	compiling and linking
	#---------------------------------------------------------------------------
	#$(CC) $(ELF_FLAGS) $(LDFLAGS) $(CFLAGS) -o $(_IDE_SRCDIR_)\main32.elf $(_IDE_SRCDIR_)\main32.c
	$(CC) $(ELF_FLAGS) $(LDFLAGS) $(CFLAGS) $(MIPS16_OPT) -c -g -Wa,-a,-ad $(_IDE_SRCDIR_)\main32.c > $(_IDE_SRCDIR_)\main32.lst
	$(CC) $(ELF_FLAGS) $(LDFLAGS) $(CFLAGS) $(MIPS16_OPT) -c -o $(_IDE_SRCDIR_)\main32.o $(_IDE_SRCDIR_)\main32.c 
	$(CC) $(ELF_FLAGS) $(LDFLAGS) $(CFLAGS) -o $(_IDE_SRCDIR_)\main32.elf  \
		$(_IDE_SRCDIR_)\main32.o \
		$(OBJDIR)\crt0.S \
		$(OBJDIR)\processor.o \
		$(OBJDIR)\usb\$(CDCLIBRARY) \
		$(OBJDIR)\usb\libadb.a \
		$(LKRDIR)\ISRwrapper.S \
		$(INCDIR)\non-free\p32xxxx.h \
		$(LIBS)

convert:
	# ------------------------------------------------------------------
	# converting elf to hex
	# ------------------------------------------------------------------
	$(OBJC) -O ihex $(_IDE_SRCDIR_)\main32.elf $(_IDE_SRCDIR_)\main32.hex

correct:
	# ------------------------------------------------------------------
	# fixing bad record
	# ------------------------------------------------------------------
	grep --binary --invert-match $(BADRECORD) $(_IDE_SRCDIR_)\main32.hex > $(_IDE_SRCDIR_)\temp.hex
	$(MV) $(_IDE_SRCDIR_)\temp.hex $(_IDE_SRCDIR_)\main32.hex
