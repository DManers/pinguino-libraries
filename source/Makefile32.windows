SHELL=cmd.exe
# ----------------------------------------------------------------------
# Makefile32.windows
# Windows Makefile for 32-bit Pinguino
# Regis Blanchot <rblanchot@gmail.com>
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# cf. qtgui/pinguino_api/pinguino_tools.py
# ----------------------------------------------------------------------
# _IDE_PROC_
# _IDE_BOARD_
# _IDE_PDEDIR_
# _IDE_BINDIR_
# _IDE_P32DIR_
# _IDE_SRCDIR_
# _IDE_HEAP_SIZE_
# _IDE_MIPS16_ENABLE_
# _IDE_OPTIMIZATION_

# ----------------------------------------------------------------------
# Directories
# ----------------------------------------------------------------------

IDEDIR      = "$(_IDE_PDEDIR_)"
BINDIR      = "$(_IDE_BINDIR_)"
P32DIR      = "$(_IDE_P32DIR_)"
SRCDIR      = "$(_IDE_SRCDIR_)"
INCDIR		= $(P32DIR)\include
LKRDIR		= $(P32DIR)\lkr
OBJDIR		= "$(_IDE_USERHOMEDIR_)"\source\obj\non-free

INCLUDEDIRS	= -I$(INCDIR)\non-free \
		  -I$(INCDIR)\pinguino\core \
		  -I$(INCDIR)\pinguino\libraries \
		  -I$(LKRDIR) \
		  -I$(IDEDIR) \
		  -I$(OBJDIR)

#-I$(SRCDIR)\
#

LIBDIRS		= -L$(OBJDIR)\usb

# ----------------------------------------------------------------------
# Various options
# ----------------------------------------------------------------------
# - cdc library / Jean-pierre Mandon 2012
# - unsupported record in hex file / Jean-pierre Mandon 2012
#		04		 : 4 bytes
#		0000	 : address
#		05		 : record type = Start_Linear_Address_Record
#		9D004000 : address where the user program should start
#				 : _RESET_ADDR (see lkr/procdefs.ld)
#		1A		 : checksum
# ----------------------------------------------------------------------

ifneq (,$(filter $(_IDE_BOARD_),PIC32_PINGUINO_220 PINGUINO32MX220 PINGUINO32MX250 PINGUINO32MX270))
	CDCLIBRARY  = libcdc220.a
	BADRECORD   = '^:040000059D0040001A'
else
	CDCLIBRARY  = libcdc.a
	BADRECORD   ='^:040000059D006000FA'
endif

ifdef CPLUPLUS
	CC	= $(BINDIR)\p32-g++.exe
	LIBS	= -lstdc++ -lm -lgcc -lc
else
	CC	= $(BINDIR)\p32-gcc.exe
	LIBS	= -lm -lgcc -lc
endif

OBJC	= $(BINDIR)\p32-objcopy.exe

RM		= DEL
CP		= COPY
MV		= MOVE

# ----------------------------------------------------------------------
# MIPS16/MIPS32 option
# MIPS16 option reduce code size and speed about 30%
# ----------------------------------------------------------------------

ifeq "$(_IDE_MIPS16_ENABLE_)" "true"
	# Generate MIPS16 code.
	MIPS16_OPT=-mips16
	# makes non-MIPS16 and MIPS16 code link-compatible.
	MIPS16_INTER=-minterlink-mips16
endif

# ----------------------------------------------------------------------
# Compilation flags
# https://gcc.gnu.org/onlinedocs/gcc/MIPS-Options.html
# -v -Wall : verbose compilation
# -march=m4k : target are PIC32MX with MIPS M4K Core
# -EL : generate code for a processor running in little-endian mode
# -msoft-float : generate output containing library calls (newlib) for floating point
# -nostdlib -static
# -ffunction-sections, -fdata-sections : place each function or data item into its own section in the output file
# -Wl,--gc-sections : tells linker to use link-time garbage collection (except when KEEP is defined)
#-fdollars-in-identifiers for ISRwrapper.S
# ----------------------------------------------------------------------

CFLAGS		= -fdollars-in-identifiers $(INCLUDEDIRS)

LDFLAGS		= $(LIBDIRS) $(LIBS)

ELF_FLAGS	= \
             -march=m4k \
             -EL -msoft-float -nostdlib -static \
             $(_IDE_OPTIMIZATION_) $(MIPS16_INTER) \
             -ffunction-sections \
             -fdata-sections \
             -Wl,--gc-sections \
             -Wl,-L$(OBJDIR) \
             -Wl,--defsym,_min_heap_size=$(_IDE_HEAP_SIZE_) \
             -Wl,-Map=$(SRCDIR)\output.map \
             -D __PIC32MX__ \
             -D __$(_IDE_PROC_)__ \
             -D $(_IDE_BOARD_) \
             -T$(LKRDIR)\$(_IDE_PROC_).ld \
             -T$(LKRDIR)\elf32pic32mx.x

# ----------------------------------------------------------------------
# rules
# ----------------------------------------------------------------------

#all: clean copy compile convert correct
all: clean copy compile convert
#all: clean copy compile
#all: copy compile convert

# ------------------------------------------------------------------
# cleaning all build files
# ------------------------------------------------------------------
clean:
	if exist $(SRCDIR)\main32.o    $(RM) $(SRCDIR)\main32.o
	if exist $(SRCDIR)\main32.elf  $(RM) $(SRCDIR)\main32.elf
	if exist $(SRCDIR)\main32.hex  $(RM) $(SRCDIR)\main32.hex
	if exist $(OBJDIR)\processor.o $(RM) $(OBJDIR)\processor.o

# ------------------------------------------------------------------
# adding proc. definitions
# ------------------------------------------------------------------
copy:
	$(CP) $(OBJDIR)\$(_IDE_PROC_).o $(OBJDIR)\processor.o

# ------------------------------------------------------------------
# compiling and linking
# ------------------------------------------------------------------
compile:
	$(CC) $(ELF_FLAGS) $(LDFLAGS) $(CFLAGS) $(MIPS16_OPT) -S -o $(SRCDIR)\main32.S   $(SRCDIR)\main32.c
	$(CC) $(ELF_FLAGS) $(LDFLAGS) $(CFLAGS) $(MIPS16_OPT) -E    $(SRCDIR)\main32.c > $(SRCDIR)\main32.pp
	$(CC) $(ELF_FLAGS) $(LDFLAGS) $(CFLAGS) $(MIPS16_OPT) -c -o $(SRCDIR)\main32.o   $(SRCDIR)\main32.c
	$(CC) $(ELF_FLAGS) $(LDFLAGS) $(CFLAGS)                  -o $(SRCDIR)\main32.elf \
		$(SRCDIR)\main32.o \
		$(OBJDIR)\processor.o \
		$(OBJDIR)\usb\$(CDCLIBRARY) \
		$(OBJDIR)\usb\libadb.a \
		$(LKRDIR)\crt0.S \
		$(LKRDIR)\ISRwrapper.S \
		$(INCDIR)\non-free\p32xxxx.h \
		$(LIBS)

# ------------------------------------------------------------------
# converting elf to hex
# ------------------------------------------------------------------
convert:
	$(OBJC) -O ihex $(SRCDIR)\main32.elf $(SRCDIR)\main32.hex

# ------------------------------------------------------------------
# fixing bad record
# ------------------------------------------------------------------
correct:
	grep --binary --invert-match $(BADRECORD) $(SRCDIR)\main32.hex > $(SRCDIR)\temp.hex
	$(MV) $(SRCDIR)\temp.hex $(SRCDIR)\main32.hex

